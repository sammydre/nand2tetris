// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        // RAM --------------------------------------------------------------
        // We only want to access/load RAM if address is < 0x4000
        Not(in=address[14], out=addressInRam);
        And(a=load, b=addressInRam, out=ramLoad);

        RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);

        // Screen -----------------------------------------------------------
        // Figure out if we're addressing the screen memory map
        Not(in=address[13],     out=addressInScreen1);
        And(a=address[14],      b=addressInScreen1, out=addressInScreen);

        And(a=addressInScreen, b=load, out=screenLoad);

        Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);

        // Keyboard ---------------------------------------------------------
        // Figure out if we're addressing the keyboard
        Equal(a=address[14], b=true,  out=aik1);
        Equal(a=address[13], b=true,  out=aik2);
        Equal(a=address[12], b=false, out=aik3);
        Equal(a=address[11], b=false, out=aik4);

        Equal4(a=address[10], b=address[9], c=address[8], d=false, out=aik5);
        Equal4(a=address[7],  b=address[6], c=address[5], d=false, out=aik6);
        Equal4(a=address[4],  b=address[3], c=address[2], d=false, out=aik7);
        Equal4(a=address[1],  b=address[0], c=false,      d=false, out=aik8);

        And4(a=aik1, b=aik2, c=aik3, d=aik4, out=aik10);
        And4(a=aik5, b=aik6, c=aik7, d=aik8, out=aik11);

        And(a=aik10, b=aik11, out=addressIsKeyboard);

        Keyboard(out=keyboardOut);

        // Mux out ----------------------------------------------------------
        
        Not(in=addressInRam, out=notAddressInRam);
        Not(in=addressInScreen, out=notAddressInScreen);
        Not(in=addressIsKeyboard, out=notAddressIsKeyboard);
        
        And(a=notAddressInRam, b=notAddressInScreen, out=inv1);
        And(a=notAddressIsKeyboard, b=inv1, out=addressIsInvalid);

        Or(a=addressInScreen, b=addressIsInvalid, out=sel0);
        Or(a=addressIsKeyboard, b=addressIsInvalid, out=sel1);

        Xor16(a=in, b=in, out=invalidOut);   // zero
        
        Busify2(a=sel1, b=sel0, out=sel);

        Mux4Way16(a=ramOut, b=screenOut, c=keyboardOut, d=invalidOut,
                  sel=sel, out=out);
}
