// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // See lecture notes, slide 23 for a rough schematic of the CPU

        // -----------------------------------------------------------------
        // Instruction decode
        // "i xx a cccccc ddd jjj"
        // i: 0= A-instruction, 1=C-instruction
        // 
        // A-instructions have a 15-bit constant
        //
        // C-instruction:
        // x: should be set to 1
        // a/c: comp
        // d: dest
        // j: jump

        // Instruction type
        Not(in=instruction[15], out=aInstruction);
        Not(in=aInstruction,    out=cInstruction);

        // Comp
        Let(in=instruction[12], out=cA);
        Let(in=instruction[11], out=c1);
        Let(in=instruction[10], out=c2);
        Let(in=instruction[9],  out=c3);
        Let(in=instruction[8],  out=c4);
        Let(in=instruction[7],  out=c5);
        Let(in=instruction[6],  out=c6);

        And(a=cA, b=cInstruction, out=selM);

        // X: D, Y: M/A
        Let(in=c1, out=aluOptZx);
        Let(in=c2, out=aluOptNx);
        Let(in=c3, out=aluOptZy);
        Let(in=c4, out=aluOptNy);
        Let(in=c5, out=aluOptF);
        Let(in=c6, out=aluOptNo);

        // Dest
        Let(in=instruction[3], out=destM);
        Let(in=instruction[4], out=destD);
        Let(in=instruction[5], out=destA);

        And(a=destD, b=cInstruction, out=dRegLoad);
        Or(a=destA,  b=aInstruction, out=aRegLoad);
        And(a=destM, b=cInstruction, out=writeM);

        // Jump
        Let(in=instruction[2], out=j1);
        Let(in=instruction[1], out=j2);
        Let(in=instruction[0], out=j3);

        Not(in=aluOutIsZero, out=ao1);
        Not(in=aluOutIsNeg, out=ao2);
        And(a=ao1, b=ao2, out=aluOutIsPos);

        // If the jump matches exactly: (JLT, JGT, JEQ)
        Busify3(a=j1, b=j2, c=j3, out=jmpCond);
        Busify3(a=aluOutIsNeg, b=aluOutIsZero, c=aluOutIsPos, out=jmpCond2);
        EqualB3(a=jmpCond, b=jmpCond2, out=shouldJump1);

        // If its a jump with no condition (JMP)
        Busify3(a=true, b=true, c=true, out=jmpCond3);
        EqualB3(a=jmpCond, b=jmpCond3, out=shouldJump2);

        // If its a not-equal jump (JNE)
        Busify3(a=true, b=false, c=true, out=jmpCond4);
        EqualB3(a=jmpCond, b=jmpCond4, out=jumpIsNotEqual);
        Not(in=aluOutIsZero, out=aluOutIsNotZero);
        And(a=jumpIsNotEqual, b=aluOutIsNotZero, out=shouldJump3);

        // JLE
        Busify3(a=true, b=true, c=false, out=jmpCond5);
        EqualB3(a=jmpCond, b=jmpCond5, out=jumpIsLessOrEqual);
        Or(a=aluOutIsZero, b=aluOutIsNeg, out=aluOutIsLessOrEqual);
        And(a=jumpIsLessOrEqual, b=aluOutIsLessOrEqual, out=shouldJump4);

        // JGE
        Busify3(a=false, b=true, c=true, out=jmpCond6);
        EqualB3(a=jmpCond, b=jmpCond6, out=jumpIsGreatOrEqual);
        Or(a=aluOutIsZero, b=aluOutIsPos, out=aluOutIsGreatOrEqual);
        And(a=jumpIsGreatOrEqual, b=aluOutIsGreatOrEqual, out=shouldJump5);
        

        Or(a=shouldJump1, b=shouldJump2, out=sj1);
        Or(a=shouldJump3, b=shouldJump4, out=sj2);
        Let(in=shouldJump5, out=sj3);

        Or(a=sj1,         b=sj2,         out=sj100);
        Or(a=sj100,       b=sj3,         out=shouldJump);

        And(a=shouldJump, b=cInstruction, out=pcLoad);

        Not(in=pcLoad, out=pcMightInc);
        Or(a=pcMightInc, b=aInstruction, out=pcInc);

        // -----------------------------------------------------------------
        // Initial Mux before A

        Mux16(a=aluOut, b=instruction, sel=aInstruction, out=muxAOut);

        // -----------------------------------------------------------------
        // A-register: loaded if we are an A-instruction

        ARegister(in=muxAOut, load=aRegLoad, out=aRegOut);

        Narrow16to15(in=aRegOut, out=addressM);

        // -----------------------------------------------------------------
        // Mux before the ALU

        Mux16(a=aRegOut, b=inM, sel=selM, out=aluAMIn);

        // -----------------------------------------------------------------
        // D-register

        DRegister(in=aluOut, load=dRegLoad, out=dRegOut);

        // -----------------------------------------------------------------
        // The ALU itself

        ALU(x=dRegOut,
            y=aluAMIn,
            zx=aluOptZx,
            nx=aluOptNx,
            zy=aluOptZy,
            ny=aluOptNy,
            f=aluOptF,
            no=aluOptNo,
            out=aluOut,
            zr=aluOutIsZero,
            ng=aluOutIsNeg);

        // Copy to outM
        Not16(in=aluOut, out=aluOutNot);
        Not16(in=aluOutNot, out=outM);

        // -----------------------------------------------------------------
        // Program Counter

        // XXX: not sure about 15/16 bit mismatch in output here
        PC(in=aRegOut, load=pcLoad, inc=pcInc, reset=reset, out=pcOut);

        Narrow16to15(in=pcOut, out=pc);


}
